import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the function that takes a (5,1) numpy array
def my_function(x):
    # Assuming x is a (5,1) np.array
    # Example function: f(x) = x1^2 + x2^2 + x3 + x4 + x5
    return x[0]**2 + x[1]**2 + x[2] + x[3] + x[4]

# Fix three variables
x3 = 1
x4 = 2
x5 = 3

# Create x1 and x2 as (100, 1) np.array
x1 = np.linspace(-5, 5, 100).reshape(100, 1)
x2 = np.linspace(-5, 5, 100).reshape(100, 1)

# Convert to one-dimensional arrays for meshgrid
x1 = x1.ravel()
x2 = x2.ravel()

# Create a meshgrid
X1, X2 = np.meshgrid(x1, x2)

# Evaluate the function over the meshgrid
Z = np.array([my_function(np.array([x1i, x2i, x3, x4, x5]).reshape(5, 1)) for x1i, x2i in zip(np.ravel(X1), np.ravel(X2))])
Z = Z.reshape(X1.shape)

# Plot the function
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X1, X2, Z, cmap='viridis')

ax.set_xlabel('X1')
ax.set_ylabel('X2')
ax.set_zlabel('f(X)')

plt.show()
